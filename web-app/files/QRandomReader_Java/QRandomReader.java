
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 *
 * @author haikalpribadi
 */
public class QRandomReader {

    public static final int INTEGERTYPE = 0;
    public static final int FLOATTYPE = 1;
    public static final int DOUBLETYPE = 2;
    public static final int CSVFORMAT = 3;
    public static final int LINEFORMAT = 4;

    /**
     * ReadStream is a private function that will be called by other functions to
     * read the data stream. It requires a URL to the stream address to be passed
     * as a parameter, which can be generated by the function 'QRandomUrl'
     */
    private static String ReadStream(URL qrandomURL) throws Exception {
        String stream = "";
        BufferedReader in = new BufferedReader(new InputStreamReader(qrandomURL.openStream()));
        String input;
        while ((input = in.readLine()) != null) {
            stream += input + "\n";
        }
        in.close();
        return stream;
    }

    /**
     * QRandomUrl is a private function that will generate the url to connect to
     * the QRandom server. User of this Class does not have to worry how it is
     * generated.
     */
    private static URL QRandomUrl(int type, int size, int format, boolean scale, int minscale, int maxscale) throws Exception {
        String url = "http://localhost/stream?";

        switch (type) {
            case 0:
                url += "type=integer";
                break;
            case 1:
                url += "type=float";
                break;
            case 2:
                url += "type=double";
                break;
            default:
                throw new Exception("Invalid data type requested.");
        }
        if (size > 0) {
            url += "&size=" + size;
        } else {
            throw new Exception("Invalid data size requested");
        }
        switch (format) {
            case 3:
                url += "&format=csv";
                break;
            case 4:
                url += "&format=line";
                break;
            default:
                throw new Exception("Invalid output format requested");
        }
        if (scale) {
            if (minscale < maxscale) {
                url += "&scale=on&minscale=" + minscale + "&maxscale=" + maxscale;
            } else {
                throw new Exception("Invalid data scale range given.");
            }
        }
        return new URL(url);
    }

    /**
     * Functions to read Integer Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadIntStream(int size) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadIntStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, format, false, 0, 0));
    }

    public static String ReadIntStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadIntStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Functions to read Float Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadFloatStream(int size) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadFloatStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, format, false, 0, 0));
    }

    public static String ReadFloatStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadFloatStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Functions to read Double Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadDoubleStream(int size) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadDoubleStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, format, false, 0, 0));
    }

    public static String ReadDoubleStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadDoubleStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Main method to test and show an example of implementing QRandomReader
     */
    public static void main(String[] args) {
        try{
            String data;

            System.out.println("10 Random Integers (scaled) ranging from 0 to 100, with the DEFAULT output format of CSV (comma separated values): ");
            data = QRandomReader.ReadIntStream(10, 0, 100);
            System.out.println(data);

            System.out.println("20 Random Floats (not scaled), with the DEFAULT output format of CSV (comma separated values): ");
            data = QRandomReader.ReadFloatStream(20);
            System.out.println(data);

            System.out.println("15 Random Integers (scaled) ranging from 0 to 10, with the output format of LINE (1 entry per line): ");
            data = QRandomReader.ReadDoubleStream(15, QRandomReader.LINEFORMAT, 0, 10);
            System.out.println(data);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
}
