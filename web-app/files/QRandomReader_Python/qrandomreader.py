#! /usr/bin/python
__author__ = "haikalpribadi"
__date__ = "$Jan 16, 2012 8:12:44 PM$"

import urllib

class QRandomReader():
    INTEGERTYPE = 0
    FLOATTYPE = 1
    DOUBLETYPE = 2
    CSVFORMAT = 3
    LINEFORMAT = 4

    # ReadStream is a private function that will be called by other functions to
    # read the data stream. It requires a URL to the stream address to be passed
    # as a parameter, which can be generated by the function 'QRandomUrl'
    @staticmethod
    def _ReadStream(url):
        stream = urllib.urlopen(url);
        data = "";
        while(1):
            input = stream.readline();
            if(input==""): break;
            data += input;
        return data;

    # QRandomUrl is a private function that will generate the url to connect to
    # the QRandom server. User of this Class does not have to worry how it is
    # generated.
    @staticmethod
    def _QRandomUrl(type, size, format, scale, minscale, maxscale):
        url = "http://localhost/stream?";

        if type==0:
            url += "type=integer";
        elif type==1:
            url += "type=float";
        elif type==2:
            url += "type=double";
        else:
            raise Exception("Invalid data type requested.");

        if size>0:
            url += "&size=" + str(size);
        else:
            raise Exception("Invalid data size requested");

        if format==3:
            url += "&format=csv";
        elif format==4:
            url += "&format=line";
        else:
            raise Exception("Invalid output format requested");

        if scale:
            if minscale<maxscale:
                url += "&scale=on&minscale=" + str(minscale) + "&maxscale=" + str(maxscale);
            else:
                raise Exception("Invalid data scale range given");
        return url;

    # This function is to read Integer streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadIntStream(size);
    # ReadIntStream(size, format);
    # ReadIntStream(size, minscale, maxscale);
    # ReadIntStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadIntStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

    # This function is to read Float streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadFloatStream(size);
    # ReadfloatStream(size, format);
    # ReadFloatStream(size, minscale, maxscale);
    # ReadFloatStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadFloatStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

    # This function is to read Double streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadFloatStream(size);
    # ReadfloatStream(size, format);
    # ReadFloatStream(size, minscale, maxscale);
    # ReadFloatStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadDoubleStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

# Main method to test and show an example of implementing QRandomReader
if __name__ == "__main__":
    try:
        print "10 Random Integers (scaled) ranging from 0 to 100, with the DEFAULT output format of CSV (comma separated values): ";
        data = QRandomReader.ReadIntStream(10, 0, 100);
        print data + "\n";

        print "20 Random Floats (not scaled), with the DEFAULT output format of CSV (comma separated values): ";
        data = QRandomReader.ReadFloatStream(20);
        print data + "\n";

        print "15 Random Doubles (scaled) ranging from 0 to 10, with the output format of LINE (1 entry per line): ";
        data = QRandomReader.ReadDoubleStream(15, QRandomReader.LINEFORMAT, 0, 10);
        print data + "\n";

    except Exception, err:
        print str(err);