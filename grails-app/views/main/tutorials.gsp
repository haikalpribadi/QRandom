<!--
  To change this template, choose Tools | Templates
  and open the template in the editor.
-->

<%@ page contentType="text/html;charset=UTF-8" %>

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="layout" content="main">
    <title>${title}</title>
    <g:javascript src="tutorials.js"/>
    <g:javascript src="XRegExp.js"/>
    <g:javascript src="shCore.js"/>
    <g:javascript src="shBrushJava.js"/>
    <g:javascript src="shBrushCpp.js"/>
    <g:javascript src="shBrushPython.js"/>
    <link rel="stylesheet" href="${resource(dir: 'css', file: 'shCore.css')}" type="text/css">
    <link rel="stylesheet" href="${resource(dir: 'css', file: 'shThemeDefault.css')}" type="text/css">
  </head>
  <body>
    <table class="contentLayout" cellpadding="0" cellspacing="0">
      <tr>
        <td class="contentTitle">
          How to implement QRandom in your programs
        </td>
      </tr>
      <tr>
        <td class="contentBody" style="padding-bottom: 0px;">
          <div id ="tutorialTabPanel" class="tabPanel">
            <ul class="tabList">
              <li>
                <div id="javaTutorialButton" class="tabListItem">
                  Java
                  <div class="tabListItemIndicator" />
                </div>
              </li>
              <li>
                <div id="cppTutorialButton" class="tabListItem">
                  C/C++
                  <div class="tabListItemIndicator" />
                </div>
              </li>
              <li>
                <div id="pythonTutorialButton" class="tabListItem">
                  Python
                  <div class="tabListItemIndicator" />
                </div>
              </li>
            </ul>
          </div>
          <div id="javaTutorial" class="contentBodyTutorials">
            <h2>Implementing QRandom in Java</h2>
            <p class="text">After you've successfully created a URL,
              you can call the <code>URL</code>'s <code>openStream()</code> method
              to get a stream from which you can read the contents of the URL. The
              <code>openStream()</code> method returns a <code>java.io.InputStream</code>
              object, so reading from a URL is as easy as reading from an input stream.
            </p>
            <p class="text">
              As we do not want to worry about generating the correct url with it's
              parameters everytime we want to retrieve the data from the URL, we shall
              create a <code>class</code> private method, <code>QRandomUrl()</code>,
              to deal with this operation transparantly. Same goes for reading the
              data stream from the URL, this will be dealt by another private method,
              <code>ReadStream()</code>, taking in a <code>URL</code> generated from
              <code>QRandomUrl()</code> as a parameter. We shall use overloaded
              functions, <code>ReadIntStream()</code>, <code>ReadFloatStream()</code>
              and <code>ReadDoubleStream()</code>, which will all call the
              <code>ReadStream()</code> and <code>QRandomUrl()</code> function to process
              the request. The functions are overloaded to accomodate the different
              combinations of parameters that could be provided. The output of the
              program will return the random numbers in one long <code>string</code>
              and you may parse it as you prefer to extract the data.
            </p>
            <p class="text">
              The code below is an example of how to implement a QRandom reader.
              The <code>main()</code> function below shows an example of how to use the program.
              You may include the <code>QRandomReader</code> <code>class</code> below in to your
              program and it should provide all the operations required.
            </p>
            <div class="tutDownloadBtnHolder">
              <a href="${resource(dir:'files', file: 'QRandomReader_Java.zip')}" class="downloadSrc round-s" onclick="">Download source code</a>
            </div>
            <script type="syntaxhighlighter" class="brush: java"><![CDATA[
   
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 *
 * @author haikalpribadi
 */
public class QRandomReader {

    public static final int INTEGERTYPE = 0;
    public static final int FLOATTYPE = 1;
    public static final int DOUBLETYPE = 2;
    public static final int CSVFORMAT = 3;
    public static final int LINEFORMAT = 4;

    /**
     * ReadStream is a private function that will be called by other functions to
     * read the data stream. It requires a URL to the stream address to be passed
     * as a parameter, which can be generated by the function 'QRandomUrl'
     */
    private static String ReadStream(URL qrandomURL) throws Exception {
        String stream = "";
        BufferedReader in = new BufferedReader(new InputStreamReader(qrandomURL.openStream()));
        String input;
        while ((input = in.readLine()) != null) {
            stream += input + "\n";
        }
        in.close();
        return stream;
    }

    /**
     * QRandomUrl is a private function that will generate the url to connect to
     * the QRandom server. User of this Class does not have to worry how it is
     * generated.
     */
    private static URL QRandomUrl(int type, int size, int format, boolean scale, int minscale, int maxscale) throws Exception {
        String url = "http://localhost/stream?";

        switch (type) {
            case 0:
                url += "type=integer";
                break;
            case 1:
                url += "type=float";
                break;
            case 2:
                url += "type=double";
                break;
            default:
                throw new Exception("Invalid data type requested.");
        }
        if (size > 0) {
            url += "&size=" + size;
        } else {
            throw new Exception("Invalid data size requested");
        }
        switch (format) {
            case 3:
                url += "&format=csv";
                break;
            case 4:
                url += "&format=line";
                break;
            default:
                throw new Exception("Invalid output format requested");
        }
        if (scale) {
            if (minscale < maxscale) {
                url += "&scale=on&minscale=" + minscale + "&maxscale=" + maxscale;
            } else {
                throw new Exception("Invalid data scale range given.");
            }
        }
        return new URL(url);
    }

    /**
     * Functions to read Integer Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadIntStream(int size) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadIntStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, format, false, 0, 0));
    }

    public static String ReadIntStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadIntStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(INTEGERTYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Functions to read Float Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadFloatStream(int size) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadFloatStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, format, false, 0, 0));
    }

    public static String ReadFloatStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadFloatStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(FLOATTYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Functions to read Double Streams. These functions are overloaded to
     * accomodate various combinations of parameters requested, but they will
     * execute the core (private) function 'ReadStream'.
     */
    public static String ReadDoubleStream(int size) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, CSVFORMAT, false, 0, 0));
    }

    public static String ReadDoubleStream(int size, int format) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, format, false, 0, 0));
    }

    public static String ReadDoubleStream(int size, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, CSVFORMAT, true, minscale, maxscale));
    }

    public static String ReadDoubleStream(int size, int format, int minscale, int maxscale) throws Exception {
        return ReadStream(QRandomUrl(DOUBLETYPE, size, format, true, minscale, maxscale));
    }

    /**
     * Main method to test and show an example of implementing QRandomReader
     */
    public static void main(String[] args) {
        try{
            String data;

            System.out.println("10 Random Integers (scaled) ranging from 0 to 100, with the DEFAULT output format of CSV (comma separated values): ");
            data = QRandomReader.ReadIntStream(10, 0, 100);
            System.out.println(data);

            System.out.println("20 Random Floats (not scaled), with the DEFAULT output format of CSV (comma separated values): ");
            data = QRandomReader.ReadFloatStream(20);
            System.out.println(data);

            System.out.println("15 Random Integers (scaled) ranging from 0 to 10, with the output format of LINE (1 entry per line): ");
            data = QRandomReader.ReadDoubleStream(15, QRandomReader.LINEFORMAT, 0, 10);
            System.out.println(data);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
}

            ]]></script>
          </div>
          <div id="cppTutorial" class="contentBodyTutorials">
            <h2>Implementing QRandom in C/C++ (Coming Soon!)</h2>
            <p>
          
            </p>
          </div>
          <div id="pythonTutorial" class="contentBodyTutorials">
            <h2>Implementing QRandom in Python</h2>
            <p class="text">
              After you've successfully created a URL, you can call <code>urllib</code>'s
              <code>urlopen()</code> method to get a stream from which you can read
              the contents of the URL. The <code>urlopen()</code> method returns a
              <code>string</code> object, so reading from a URL is as easy as reading
              from an input stream.
            </p>
            <p class="text">
              As we do not want to worry about generating the correct url with it's
              parameters everytime we want to retrieve the data from the URL, we shall create a <code>class</code> private method, <code>_QRandomUrl()</code>, to deal with this operation transparantly. Same goes for reading the data stream from the URL, this will be dealt by another private method, <code>_ReadStream()</code>, taking in a URL <code>string</code> generated from <code>_QRandomUrl()</code> as a parameter. We shall use the public functions <code>ReadIntStream()</code>, <code>ReadFloatStream()</code> and <code>ReadDoubleStream()</code>, which will all call the <code>_ReadStream()</code> and <code>_QRandomUrl()</code> function to process the request. The functions are able to take in variable length of parameters to accomodate the different combinations of parameters that could be provided. You must pay attention to the combination of parameters associated with each different length; the type and order of parameters being provided will determine the data requested. The output of the program will return the random numbers in one long <code>string</code> and you may parse it as you prefer to extract the data.
            </p>
            <p class="text">
              The code below is an example of how to implement a QRandom reader in
              Python. The <code>main</code> function below shows an example of how
              to use the program. You may include the <code>QRandomReader</code>
              <code>class</code> below in to your program and it should provide all
              the operations required.
            </p>
            <div class="tutDownloadBtnHolder">
              <a href="${resource(dir:'files', file: 'QRandomReader_Python.zip')}" class="downloadSrc round-s" onclick="">Download source code</a>
            </div>
            <script type="syntaxhighlighter" class="brush: python"><![CDATA[
          
#! /usr/bin/python
__author__ = "haikalpribadi"
__date__ = "$Jan 16, 2012 8:12:44 PM$"

import urllib

class QRandomReader():
    INTEGERTYPE = 0
    FLOATTYPE = 1
    DOUBLETYPE = 2
    CSVFORMAT = 3
    LINEFORMAT = 4

    # ReadStream is a private function that will be called by other functions to
    # read the data stream. It requires a URL to the stream address to be passed
    # as a parameter, which can be generated by the function 'QRandomUrl'
    @staticmethod
    def _ReadStream(url):
        stream = urllib.urlopen(url);
        data = "";
        while(1):
            input = stream.readline();
            if(input==""): break;
            data += input;
        return data;

    # QRandomUrl is a private function that will generate the url to connect to
    # the QRandom server. User of this Class does not have to worry how it is
    # generated.
    @staticmethod
    def _QRandomUrl(type, size, format, scale, minscale, maxscale):
        url = "http://localhost/stream?";

        if type==0:
            url += "type=integer";
        elif type==1:
            url += "type=float";
        elif type==2:
            url += "type=double";
        else:
            raise Exception("Invalid data type requested.");

        if size>0:
            url += "&size=" + str(size);
        else:
            raise Exception("Invalid data size requested");

        if format==3:
            url += "&format=csv";
        elif format==4:
            url += "&format=line";
        else:
            raise Exception("Invalid output format requested");

        if scale:
            if minscale&lt;maxscale:
                url += "&scale=on&minscale=" + str(minscale) + "&maxscale=" + str(maxscale);
            else:
                raise Exception("Invalid data scale range given");
        return url;

    # This function is to read Integer streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadIntStream(size);
    # ReadIntStream(size, format);
    # ReadIntStream(size, minscale, maxscale);
    # ReadIntStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadIntStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.INTEGERTYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

    # This function is to read Float streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadFloatStream(size);
    # ReadfloatStream(size, format);
    # ReadFloatStream(size, minscale, maxscale);
    # ReadFloatStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadFloatStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.FLOATTYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

    # This function is to read Double streams. This function takes variable-length
    # of combinations of parameters to provide. The available combinations to use are:
    # ReadFloatStream(size);
    # ReadfloatStream(size, format);
    # ReadFloatStream(size, minscale, maxscale);
    # ReadFloatStream(size, format, minscale, maxscale);
    #
    # Please pay attention to the combinations of parameters to provide based on
    # the number of parameters provided.
    @staticmethod
    def ReadDoubleStream(size, *args):
        paramLength = args.__len__();
        if paramLength==0:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, QRandomReader.CSVFORMAT, False, 0, 0));
        elif paramLength==1:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, args[0], False, 0, 0));
        elif paramLength==2:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, QRandomReader.CSVFORMAT, True, args[0], args[1]));
        elif paramLength==3:
            return QRandomReader._ReadStream(QRandomReader._QRandomUrl(QRandomReader.DOUBLETYPE, size, args[0], True, args[1], args[2]));
        else:
            raise Exception("Invalid number of arguments provided.");

# Main method to test and show an example of implementing QRandomReader
if __name__ == "__main__":
    try:
        print "10 Random Integers (scaled) ranging from 0 to 100, with the DEFAULT output format of CSV (comma separated values): ";
        data = QRandomReader.ReadIntStream(10, 0, 100);
        print data + "\n";

        print "20 Random Floats (not scaled), with the DEFAULT output format of CSV (comma separated values): ";
        data = QRandomReader.ReadFloatStream(20);
        print data + "\n";

        print "15 Random Doubles (scaled) ranging from 0 to 10, with the output format of LINE (1 entry per line): ";
        data = QRandomReader.ReadDoubleStream(15, QRandomReader.LINEFORMAT, 0, 10);
        print data + "\n";

    except Exception, err:
        print str(err);
          
            ]]></script>
          </div>
        </td>
      </tr>
    </table>
  </body>
</html>